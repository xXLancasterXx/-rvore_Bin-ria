class No():
  def __init__(self, valor, ant=None, prox=None, pai=None):
    self.valor = valor
    self.esq = ant
    self.dir = prox
    self.pai = pai

  def __str__(self):
    a = self.esq
    p = self.dir
    ant_str = a.valor if self.esq is not None else "None" # se não tiver valor, é nulo
    prox_str = p.valor if self.dir is not None else "None"
    return f'Valor: {self.valor} F_Esquerdo: {ant_str}\n F_Direito: {prox_str}' # printa


class Arvore_Bin():
  def __init__(self):
    self.__raiz = None
    self.layers = None
    self.aga = []
    pass

  def isEmpty(self):
    return self.__raiz is None

  def Layer(self):
    return int(input("Quantos Andares a árvore terá?\n "))


  def add(self, valores=None):
    nos = [] # [[1], [2,3], [2,3,1,4]]
    Acont = 0
    if valores is None:
      self.layers = self.Layer()
    else:
      self.layers = len(valores)
      nos = valores
    
    print()
    if valores is None:
      for i in range(self.layers):
          print(f"Digite o(s) valore(s) do(s) galho(s) no {i+1}º andar\n")
          print(f"precisa ser {2**i} valor(es)!\n") ## Considerar " " None
          noses = input("").split(",")
          noses = (noses + [""] * (2**i))[:2**i]
          nos.append(noses)

    
    for i in range(self.layers): ### i seria cada andar
      self.aga.append([])
      for j in range(2**i): # j seria cada nó
  
        no = No(nos[i][j]) ##Eu to perdendo a sanidade aos poucos||| eu tbm
        self.aga[i].append(no)


    for i in range(len(self.aga)): # i = int parte da hereditariedade
      if i == 0:
        self.__raiz = self.aga[i][i]
      else:
        cont = 0
        while True:
          if cont % 2 == 0 and cont < len(self.aga[i]):
            self.aga[i-1][Acont].esq = self.aga[i][cont]
          else:
            self.aga[i-1][Acont].dir = self.aga[i][cont]
          cont += 1
          if cont !=0 and cont % 2 == 0:
            Acont += 1
          if cont == len(self.aga[i]):
            break
        Acont = 0


  def __str__(self):
    if self.isEmpty():
      return 'None'
    def arv_print(node, saida='', esquerda=True):
      if node is not None and node.valor != " ":
        print(saida + ('|--> ' if esquerda else '\\--> ') + str(node.valor))
        arv_print(node.esq, saida + ("|    " if esquerda else "    "),True)
        arv_print(node.dir, saida + ("|    " if esquerda else "    "),False)
    print()
    arv_print(self.__raiz)
    return ""
